/* automatically generated by rust-bindgen */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const WANT_RAW_DATA_SECTOR: u32 = 1;
pub const WANT_SUBCODE: u32 = 1;
pub const NEED_CACHE_HUNK: u32 = 1;
pub const VERIFY_BLOCK_CRC: u32 = 1;
pub const CHD_HEADER_VERSION: u32 = 5;
pub const CHD_V1_HEADER_SIZE: u32 = 76;
pub const CHD_V2_HEADER_SIZE: u32 = 80;
pub const CHD_V3_HEADER_SIZE: u32 = 120;
pub const CHD_V4_HEADER_SIZE: u32 = 108;
pub const CHD_V5_HEADER_SIZE: u32 = 124;
pub const CHD_MAX_HEADER_SIZE: u32 = 124;
pub const CHD_MD5_BYTES: u32 = 16;
pub const CHD_SHA1_BYTES: u32 = 20;
pub const CHDFLAGS_HAS_PARENT: u32 = 1;
pub const CHDFLAGS_IS_WRITEABLE: u32 = 2;
pub const CHDFLAGS_UNDEFINED: u32 = 4294967292;
pub const CHDCOMPRESSION_NONE: u32 = 0;
pub const CHDCOMPRESSION_ZLIB: u32 = 1;
pub const CHDCOMPRESSION_ZLIB_PLUS: u32 = 2;
pub const CHDCOMPRESSION_AV: u32 = 3;
pub const CHD_CODEC_NONE: u32 = 0;
pub const AV_CODEC_COMPRESS_CONFIG: u32 = 1;
pub const AV_CODEC_DECOMPRESS_CONFIG: u32 = 2;
pub const CHDMETATAG_WILDCARD: u32 = 0;
pub const CHD_MDFLAGS_CHECKSUM: u32 = 1;
pub const HARD_DISK_METADATA_FORMAT: &'static [u8; 32usize] = b"CYLS:%d,HEADS:%d,SECS:%d,BPS:%d\0";
pub const CDROM_TRACK_METADATA_FORMAT: &'static [u8; 38usize] =
    b"TRACK:%d TYPE:%s SUBTYPE:%s FRAMES:%d\0";
pub const CDROM_TRACK_METADATA2_FORMAT: &'static [u8; 78usize] =
    b"TRACK:%d TYPE:%s SUBTYPE:%s FRAMES:%d PREGAP:%d PGTYPE:%s PGSUB:%s POSTGAP:%d\0";
pub const GDROM_TRACK_METADATA_FORMAT: &'static [u8; 85usize] =
    b"TRACK:%d TYPE:%s SUBTYPE:%s FRAMES:%d PAD:%d PREGAP:%d PGTYPE:%s PGSUB:%s POSTGAP:%d\0";
pub const AV_METADATA_FORMAT: &'static [u8; 71usize] =
    b"FPS:%d.%06d WIDTH:%d HEIGHT:%d INTERLACED:%d CHANNELS:%d SAMPLERATE:%d\0";
pub const CHD_OPEN_READ: u32 = 1;
pub const CHD_OPEN_READWRITE: u32 = 2;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type UINT64 = u64;
pub type UINT32 = u32;
pub type UINT16 = u16;
pub type UINT8 = u8;
pub type INT64 = i64;
pub type INT32 = i32;
pub type INT16 = i16;
pub type INT8 = i8;
pub const _chd_error_CHDERR_NONE: _chd_error = 0;
pub const _chd_error_CHDERR_NO_INTERFACE: _chd_error = 1;
pub const _chd_error_CHDERR_OUT_OF_MEMORY: _chd_error = 2;
pub const _chd_error_CHDERR_INVALID_FILE: _chd_error = 3;
pub const _chd_error_CHDERR_INVALID_PARAMETER: _chd_error = 4;
pub const _chd_error_CHDERR_INVALID_DATA: _chd_error = 5;
pub const _chd_error_CHDERR_FILE_NOT_FOUND: _chd_error = 6;
pub const _chd_error_CHDERR_REQUIRES_PARENT: _chd_error = 7;
pub const _chd_error_CHDERR_FILE_NOT_WRITEABLE: _chd_error = 8;
pub const _chd_error_CHDERR_READ_ERROR: _chd_error = 9;
pub const _chd_error_CHDERR_WRITE_ERROR: _chd_error = 10;
pub const _chd_error_CHDERR_CODEC_ERROR: _chd_error = 11;
pub const _chd_error_CHDERR_INVALID_PARENT: _chd_error = 12;
pub const _chd_error_CHDERR_HUNK_OUT_OF_RANGE: _chd_error = 13;
pub const _chd_error_CHDERR_DECOMPRESSION_ERROR: _chd_error = 14;
pub const _chd_error_CHDERR_COMPRESSION_ERROR: _chd_error = 15;
pub const _chd_error_CHDERR_CANT_CREATE_FILE: _chd_error = 16;
pub const _chd_error_CHDERR_CANT_VERIFY: _chd_error = 17;
pub const _chd_error_CHDERR_NOT_SUPPORTED: _chd_error = 18;
pub const _chd_error_CHDERR_METADATA_NOT_FOUND: _chd_error = 19;
pub const _chd_error_CHDERR_INVALID_METADATA_SIZE: _chd_error = 20;
pub const _chd_error_CHDERR_UNSUPPORTED_VERSION: _chd_error = 21;
pub const _chd_error_CHDERR_VERIFY_INCOMPLETE: _chd_error = 22;
pub const _chd_error_CHDERR_INVALID_METADATA: _chd_error = 23;
pub const _chd_error_CHDERR_INVALID_STATE: _chd_error = 24;
pub const _chd_error_CHDERR_OPERATION_PENDING: _chd_error = 25;
pub const _chd_error_CHDERR_NO_ASYNC_OPERATION: _chd_error = 26;
pub const _chd_error_CHDERR_UNSUPPORTED_FORMAT: _chd_error = 27;
pub type _chd_error = i32;
pub use self::_chd_error as chd_error;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _chd_file {
    _unused: [u8; 0],
}
#[doc = "TYPE DEFINITIONS"]
pub type chd_file = _chd_file;
pub type chd_header = _chd_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _chd_header {
    pub length: UINT32,
    pub version: UINT32,
    pub flags: UINT32,
    pub compression: [UINT32; 4usize],
    pub hunkbytes: UINT32,
    pub totalhunks: UINT32,
    pub logicalbytes: UINT64,
    pub metaoffset: UINT64,
    pub mapoffset: UINT64,
    pub md5: [UINT8; 16usize],
    pub parentmd5: [UINT8; 16usize],
    pub sha1: [UINT8; 20usize],
    pub rawsha1: [UINT8; 20usize],
    pub parentsha1: [UINT8; 20usize],
    pub unitbytes: UINT32,
    pub unitcount: UINT64,
    pub hunkcount: UINT32,
    pub mapentrybytes: UINT32,
    pub rawmap: *mut UINT8,
    pub obsolete_cylinders: UINT32,
    pub obsolete_sectors: UINT32,
    pub obsolete_heads: UINT32,
    pub obsolete_hunksize: UINT32,
}
#[test]
fn bindgen_test_layout__chd_header() {
    assert_eq!(
        ::std::mem::size_of::<_chd_header>(),
        200usize,
        concat!("Size of: ", stringify!(_chd_header))
    );
    assert_eq!(
        ::std::mem::align_of::<_chd_header>(),
        8usize,
        concat!("Alignment of ", stringify!(_chd_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).compression as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(compression)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).hunkbytes as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(hunkbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).totalhunks as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(totalhunks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).logicalbytes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(logicalbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).metaoffset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(metaoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).mapoffset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(mapoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).md5 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).parentmd5 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(parentmd5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).sha1 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(sha1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).rawsha1 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(rawsha1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).parentsha1 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(parentsha1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).unitbytes as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(unitbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).unitcount as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(unitcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).hunkcount as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(hunkcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).mapentrybytes as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(mapentrybytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).rawmap as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(rawmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).obsolete_cylinders as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(obsolete_cylinders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).obsolete_sectors as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(obsolete_sectors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).obsolete_heads as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(obsolete_heads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_header>())).obsolete_hunksize as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_header),
            "::",
            stringify!(obsolete_hunksize)
        )
    );
}
pub type chd_verify_result = _chd_verify_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _chd_verify_result {
    pub md5: [UINT8; 16usize],
    pub sha1: [UINT8; 20usize],
    pub rawsha1: [UINT8; 20usize],
    pub metasha1: [UINT8; 20usize],
}
#[test]
fn bindgen_test_layout__chd_verify_result() {
    assert_eq!(
        ::std::mem::size_of::<_chd_verify_result>(),
        76usize,
        concat!("Size of: ", stringify!(_chd_verify_result))
    );
    assert_eq!(
        ::std::mem::align_of::<_chd_verify_result>(),
        1usize,
        concat!("Alignment of ", stringify!(_chd_verify_result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_verify_result>())).md5 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_verify_result),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_verify_result>())).sha1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_verify_result),
            "::",
            stringify!(sha1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_verify_result>())).rawsha1 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_verify_result),
            "::",
            stringify!(rawsha1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_chd_verify_result>())).metasha1 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_chd_verify_result),
            "::",
            stringify!(metasha1)
        )
    );
}
extern "C" {
    pub fn chd_open_file(
        file: *mut FILE,
        mode: ::std::os::raw::c_int,
        parent: *mut chd_file,
        chd: *mut *mut chd_file,
    ) -> chd_error;
}
extern "C" {
    pub fn chd_open(
        filename: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        parent: *mut chd_file,
        chd: *mut *mut chd_file,
    ) -> chd_error;
}
extern "C" {
    pub fn chd_precache(chd: *mut chd_file) -> chd_error;
}
extern "C" {
    pub fn chd_close(chd: *mut chd_file);
}
extern "C" {
    pub fn chd_core_file(chd: *mut chd_file) -> *mut FILE;
}
extern "C" {
    pub fn chd_error_string(err: chd_error) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn chd_get_header(chd: *mut chd_file) -> *const chd_header;
}
extern "C" {
    pub fn chd_read_header(
        filename: *const ::std::os::raw::c_char,
        header: *mut chd_header,
    ) -> chd_error;
}
extern "C" {
    pub fn chd_read(
        chd: *mut chd_file,
        hunknum: UINT32,
        buffer: *mut ::std::os::raw::c_void,
    ) -> chd_error;
}
extern "C" {
    pub fn chd_get_metadata(
        chd: *mut chd_file,
        searchtag: UINT32,
        searchindex: UINT32,
        output: *mut ::std::os::raw::c_void,
        outputlen: UINT32,
        resultlen: *mut UINT32,
        resulttag: *mut UINT32,
        resultflags: *mut UINT8,
    ) -> chd_error;
}
extern "C" {
    pub fn chd_codec_config(
        chd: *mut chd_file,
        param: ::std::os::raw::c_int,
        config: *mut ::std::os::raw::c_void,
    ) -> chd_error;
}
extern "C" {
    pub fn chd_get_codec_name(codec: UINT32) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
